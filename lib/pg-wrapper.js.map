{"version":3,"sources":["pg-wrapper.js"],"names":[],"mappings":";;;;;;;;AAIA;;;;;;;;;;;;;IAYM;AAGJ,WAHI,aAGJ,CAAY,MAAZ,EAA2B,IAA3B,EAAyC;0BAHrC,eAGqC;;AACvC,SAAK,MAAL,GAAc,MAAd,CADuC;AAEvC,SAAK,IAAL,GAAY,IAAZ,CAFuC;GAAzC;;eAHI;;;2EAOQ;;;YAAqB,+DAAwB;YACvD;;;;;qBACI;;;;;iDACK,IAAI,OAAJ,CAAa,UAAC,OAAD,EAAU,MAAV,EAAqB;AACvC,sBAAM,QAAQ,MAAK,MAAL,CAAY,KAAZ,CAAkB,WAAlB,EAA+B,MAA/B,CAAR,CADiC;AAEvC,wBAAM,EAAN,CAAS,KAAT,EAAgB,SAAhB,EAFuC;AAGvC,wBAAM,EAAN,CAAS,OAAT,EAAkB,iBAAS;AACzB,0BAAK,IAAL,GADyB;AAEzB,uDAAiC,KAAjC,EAFyB;mBAAT,CAAlB,CAHuC;AAOvC,wBAAM,EAAN,CAAS,KAAT,EAAgB,UAAC,MAAD,EAAY;AAC1B,0BAAK,IAAL,GAD0B;AAE1B,4BAAQ,MAAR,EAF0B;mBAAZ,CAAhB,CAPuC;iBAArB;;;iDAab,IAAI,OAAJ,CAAa,UAAC,OAAD,EAAU,MAAV,EAAqB;AACvC,wBAAK,MAAL,CAAY,KAAZ,CAAkB,WAAlB,EAA+B,MAA/B,EAAuC,UAAC,GAAD,EAAM,MAAN,EAAiB;AACtD,0BAAK,IAAL,GADsD;AAEtD,wBAAI,GAAJ,EAAS;AACP,yDAAiC,GAAjC,EADO;qBAAT,MAEO;AACL,8BAAQ,MAAR,EADK;qBAFP;mBAFqC,CAAvC,CADuC;iBAArB;;;;;;;;;;;;;;;;;;SAvBpB;;;AAqCN,IAAM,aAAa;AACjB,kBADiB;AAEX,4BAAQ,WAA0C;;;;;;;;gDAC/C,IAAI,OAAJ,CAAY,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AAC3C,6BAAG,OAAH,CAAW,SAAX,EAAsB,UAAC,GAAD,EAAM,MAAN,EAAc,IAAd,EAAuB;AAC3C,sBAAI,GAAJ,EAAS;AACP,8CAAwB,GAAxB,EADO;mBAAT;AAGA,sBAAM,gBAAgB,IAAI,aAAJ,CAAkB,MAAlB,EAA0B,IAA1B,CAAhB,CAJqC;AAK3C,0BAAQ,aAAR,EAL2C;iBAAvB,CAAtB,CAD2C;eAA1B;;;;;;;;UADmC;GAFvC;CAAb;;kBAeS","file":"pg-wrapper.js","sourcesContent":["/*\n * @flow\n */\n\nimport pg from 'pg';\n\ntype Result = {\n  command:string,\n  rowCount:number,\n  oid:mixed,\n  rows:Array<mixed>,\n  addRow: (row:mixed) => void\n};\n\n// function inside a class must be arrow function!\n// for binding this to the class\nclass ClientWrapper {\n  client: any;\n  done: ()=>any;\n  constructor(client: mixed, done:()=>any) {\n    this.client = client;\n    this.done = done;\n  }\n  async query(queryString: string, params: ?Array<mixed> = undefined,\n    rowHandle : ?(row:mixed, result:Result) =>void ):Promise<Result> {\n    if (rowHandle) { // use node-postgres 's event system\n      return new Promise( (resolve, reject) => {\n        const query = this.client.query(queryString, params);\n        query.on('row', rowHandle);\n        query.on('error', error => {\n          this.done();\n          reject(`[ClientWrapper.query]: ${error}`);\n        });\n        query.on('end', (result) => {\n          this.done();\n          resolve(result);\n        });\n      });\n    } else { // the node-postgres's directly callback\n      return new Promise( (resolve, reject) => {\n        this.client.query(queryString, params, (err, result) => {\n          this.done();\n          if (err) {\n            reject(`[ClientWrapper.query]: ${err}`);\n          } else {\n            resolve(result);\n          }\n        });\n      });\n    }\n  }\n}\n\nconst pg_wrapper = {\n  pg:pg,\n  async connect(conString: string):Promise<ClientWrapper> {\n    return new Promise(function(resolve, reject) {\n      pg.connect(conString, (err, client, done) => {\n        if (err) {\n          reject(`[pg.connect]: ${err}`);\n        }\n        const clientWrapper = new ClientWrapper(client, done);\n        resolve(clientWrapper);\n      });\n    });\n  },\n};\n\nexport default pg_wrapper;\n"],"sourceRoot":"/home/iamchenxin/project/my/es7-postgres/src"}
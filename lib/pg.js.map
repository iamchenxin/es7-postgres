{"version":3,"sources":["pg.js"],"names":[],"mappings":";;;;;;;AAMA;;;;;;;;AAFA,IAAM,KAAK,QAAQ,IAAR,CAAX;;AAIA,IAAM,YAAY;AAChB,MAAG,EADa;AAEV,SAFU,mBAEF,SAFE,EAEyC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAChD,IAAI,OAAJ,CAAY,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AAC3C,mBAAG,OAAH,CAAW,SAAX,EAAsB,UAAC,GAAD,EAAM,MAAN,EAAc,IAAd,EAAuB;AAC3C,0BAAQ,GAAR,CAAY,YAAZ;AACA,sBAAI,GAAJ,EAAS;AACP,8CAAwB,GAAxB;AACD;AACD,sBAAM,gBAAgB,qBAAkB,MAAlB,EAA0B,IAA1B,CAAtB;AACA,0BAAQ,aAAR;AACD,iBAPD;AAQD,eATM,CADgD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWxD;AAbe,CAAlB;;QAiBE,S,GAAA,S","file":"pg.js","sourcesContent":["/*\n * @flow\n */\n\nconst pg = require('pg');\n\nimport ClientWrapper from './client.js';\n\nconst pgWrapper = {\n  pg:pg,\n  async connect(conString : string):Promise<ClientWrapper> {\n    return new Promise(function(resolve, reject) {\n      pg.connect(conString, (err, client, done) => {\n        console.log('not called');\n        if (err) {\n          reject(`[pg.connect]: ${err}`);\n        }\n        const clientWrapper = new ClientWrapper(client, done);\n        resolve(clientWrapper);\n      });\n    });\n  },\n};\n\nexport {\n  pgWrapper\n};\n"],"sourceRoot":"/home/iamchenxin/project/lang/es7-postgres/src"}